App.GG.Effect.ai.update(
  mod: App.GG.AI -> App.GG.AI
): App.GG.Effect<Unit>
  (center, origin, local)

  let new_grid = App.GG.Creature.modify_at(App.GG.AI.update(mod), center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")


App.GG.Effect.ai.get: App.GG.Effect<Maybe<App.GG.AI>>
  (center, origin, local)

  let new_AI = App.GG.AI.get(center, local@grid)
  App.GG.Effect.Result.new!(new_AI, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.ai.inc(key: String): App.GG.Effect<Unit>
  let func = 
    (ai: App.GG.AI)
    let value = ai{key}
    case value { 
      none: 
          ai{key} <- +0#32
      some: 
        ai{key} <- value.value + 1
    }
  App.GG.Effect.ai.update(func)

App.GG.Effect.ai.inc_vision(reset: Bool): App.GG.Effect<Unit>
  App.GG.Effect { 
    get center = App.GG.Effect.coord.get_center
    get creature = App.GG.Effect.creature.get
    get grid = App.GG.Effect.grid.get
    without creature: App.GG.Effect.pass
    let coords = App.GG.Coord.front_all(center, creature@team, grid)
    let target = false
    for coord in coords with target:
      target || App.GG.Coord.has_enemy(coord, creature@team, grid)
    let inc = if reset then App.GG.AI.vision_inc else App.GG.AI.inc_no_reset
    App.GG.Effect.ai.update(inc(target))
  }


// Effects =
// Each item is a pair of two things:
//   a String -> the key for the AI map, "seen", in example
//   a List of pairs ->
//     I32 -> Bool ->  when the value for that key in the map is reached
//     Effect ->  run this effect
//
// This functions runs all the possible effects in the list
App.GG.Effect.ai.run(
  effects: List<Pair<String, List<Pair<I32 -> Bool, App.GG.Effect<Unit>>>>>
): App.GG.Effect<Unit>
  App.GG.Effect { 
    get AI = App.GG.Effect.ai.get
    without AI: App.GG.Effect.pass
    App.GG.Effect {
      let effs = []
      for pair in effects with effs:
        let key = pair@fst
        let conditions = pair@snd
        let effs = effs ++ App.GG.Effect.ai.run.get_action(key, conditions, AI)
        effs
      //log("LIST LENGTH: " | Nat.show(List.length!(effs)))
      let mod = (effect: App.GG.Effect<Unit>) effect
      App.GG.Effect.multiple<App.GG.Effect<Unit>>(mod, effs)
    }
  }

App.GG.Effect.ai.modify(key: String, mod: I32 -> I32): App.GG.Effect<Unit>
  App.GG.Effect {
    let mod = App.GG.AI.modify(key, mod)
    App.GG.Effect.ai.update(mod)
  }

App.GG.Effect.ai.run.get_action(key: String, effs: List<Pair<I32 -> Bool, App.GG.Effect<Unit>>>, AI: App.GG.AI): List<App.GG.Effect<Unit>>
  let val = AI{key}
  case val {
    none: []
    some:
      case effs {
        nil: []
        cons:
          //log("key: "| key | " value: " | I32.show(val.value))
          let condition = effs.head@fst
          let eff = effs.head@snd
          let new_eff = 
            if condition(val.value) then
              [eff]
            else
              []
          new_eff ++ App.GG.Effect.ai.run.get_action(key, effs.tail, AI)
      }
  }

