App.GG.Effect.animation.update(new_animation: App.GG.Animation): App.GG.Effect<Unit>
  (center, origin, local)
  let mod =
    (creature)
      let creature = creature@animation <- {new_animation, 0}
      creature
  let new_grid = App.GG.Creature.modify_at(mod, center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")
   
App.GG.Effect.animation.get: App.GG.Effect<Maybe<Pair<App.GG.Animation, U64>>>
  (center, origin, local)
  let result = Maybe {
    get creature = App.GG.Creature.get(center, local@grid)
    return creature@animation
  }
  App.GG.Effect.Result.new!(result, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.animation.inc: App.GG.Effect<Unit>
  App.GG.Effect.animation.modify_frame(U64.add(1))

App.GG.Effect.animation.update_frame(new_frame: U64): App.GG.Effect<Unit>
  App.GG.Effect.animation.modify_frame((x) new_frame)

App.GG.Effect.animation.modify_frame(mod: U64 -> U64): App.GG.Effect<Unit>
  (center, origin, local)
  let mod = (creature: App.GG.Creature) creature@animation <- {creature@animation@fst, mod(creature@animation@snd)}
  let new_grid = App.GG.Creature.modify_at(mod, center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.animation.modify_by_frame(mod: U64 -> U64): App.GG.Effect<Unit>
  App.GG.Effect {
    get frame = App.GG.Effect.frame.get
    without frame: App.GG.Effect.pass
    App.GG.Effect.animation.update_frame(mod(frame))
  }

App.GG.Effect.animation.modify_by_duration.in_tile(frame_count: U64, max_frames: U64):  App.GG.Effect<Unit>
  let count = U64.to_f64(frame_count)
  let max   = U64.to_f64(max_frames)
  let part  = max / count
  let mod   = (frame) I32.to_u64(F64.to_i32((U64.to_f64(frame) / part)))

  App.GG.Effect.animation.modify_by_frame(mod)
