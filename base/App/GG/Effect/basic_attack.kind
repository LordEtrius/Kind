App.GG.Effect.basic_attack(creature_frame: U64): App.GG.Effect<Unit>
  let start_frame = 0#64
  let final_frame = 12#64
  let charge_0 = 320#64
  let img = App.GG.img.bullet
  App.GG.Effect {
    App.GG.Effect.charge.reset
    App.GG.Effect.animation.modify_by_duration.in_tile(12, final_frame) //How many voxbox imgs has the animation , frame limit
    get frame = App.GG.Effect.frame.get
    App.GG.Effect.frame.inc
    get creature = App.GG.Effect.creature.get
    get center = App.GG.Effect.coord.get_center
    get enhancement = App.GG.Effect.basic_attack.get_enhancement(center)
    without creature: App.GG.Effect.pass
    without frame: App.GG.Effect.pass
    let projectile_effect = 
      without enhancement: App.GG.Effect.regular_basic_attack.Projectile.Effect.select(img, creature_frame)
      if creature_frame >? charge_0 then
        App.GG.Effect.regular_basic_attack.Projectile.Effect.select(img, creature_frame)
      else
        App.GG.Effect.enhanced_basic_attack.Projectile.Effect(creature, false)

    App.GG.Effect { 
      let animation = App.GG.Animation.attack
      let projectile_info = App.GG.Projectile.Info.new(creature@team, App.GG.Projectile.Status.unit, NatSet.new, 0#64, true)
      let projectile = App.GG.Projectile.new(projectile_info, projectile_effect)
      let spawn_coord = App.GG.Coord.front(creature@team, center) // Gets the coordinate in front of the creature
      App.GG.Effect.vbox.in_tile(App.GG.Chip.Arms.shockwave.img(frame))
      switch U64.eql(frame) { 
        start_frame: App.GG.Effect.animation.update(animation) // Sets animation for creature
        final_frame - 2: App.GG.Effect.projectile.add_at(spawn_coord, projectile)
        final_frame: App.GG.Effect.actions.reset
      }default App.GG.Effect.pass
    }
  }



App.GG.Effect.regular_basic_attack.Projectile.Effect.select(img: VoxBox, frame: U64): App.GG.Effect<Unit>
  let dmg = +5#32
  let charge_0 = App.GG.Effect.regular_basic_attack.Projectile.Effect(dmg * 1, img, 4, false)
  let charge_1 = App.GG.Effect.regular_basic_attack.Projectile.Effect(dmg * 2, img, 4  false)
  let charge_2 = App.GG.Effect.regular_basic_attack.Projectile.Effect(dmg * 4, img, 4, false)
  let charge_3 = App.GG.Effect.regular_basic_attack.Projectile.Effect(dmg * 8, img, 2, false)
  let charge_val = 
    switch U64.ltn(frame) { 
      321: 0
      641: 1
      960: 2
      961: 3
    }default 0

  switch Nat.eql(charge_val) { 
    0: charge_0
    1: charge_1
    2: charge_2
    3: charge_3
  }default charge_0



App.GG.Effect.basic_attack.bullet_position_x(current_frame: U64, max_frame: U64, reverse: Bool): I32
  let tile_x = +32#32
  let start = 0.0
  let end = 32.0
  let pos = F64.lerp(start, end, U64.to_f64(current_frame) / U64.to_f64(max_frame))
  let x = F64.to_i32(pos) - (tile_x / 2) 
  if reverse then +0#32 - x else x


App.GG.Effect.enhanced_basic_attack.Projectile.Effect(creature: App.GG.Creature, reverse: Bool): App.GG.Effect<Unit>
  let status = creature@statuses@enhance_attack
  App.GG.Effect { 
    get center = App.GG.Effect.coord.get_center
    without status:   App.GG.Effect.pass
    let {effect, name} = 
      case status {
        enhance_attack: 
            case status.mod { 
              nil: {App.GG.Effect.pass, ""} 
              cons: 
                let effect = status.mod.head@eff(center)
                let name = status.mod.head@name
                {effect, name} 
            }
      }default {App.GG.Effect.pass, ""} 

    let img =  App.GG.Creature.Status.enhance_attack.draw_projectile(name)
    App.GG.Effect.basic_attack.move_projectile(effect, img, 4, reverse)
  }
  
  

App.GG.Effect.regular_basic_attack.Projectile.Effect(dmg: I32, img: VoxBox ,projectile_period: U64, reverse: Bool): App.GG.Effect<Unit>
  App.GG.Effect {
    get center = App.GG.Effect.coord.get_center
    let effect = 
      App.GG.Effect { 
        App.GG.Effect.projectile.hit.damage_at(dmg, false, false, center)
        return unit 
      }
    App.GG.Effect.basic_attack.move_projectile(effect, img, projectile_period, reverse)
    }

App.GG.Effect.basic_attack.move_projectile(effect: App.GG.Effect<Unit>, img: VoxBox, projectile_period: U64, reverse: Bool): App.GG.Effect<Unit>
  App.GG.Effect { 
    get frame = App.GG.Effect.frame.get
    get center = App.GG.Effect.coord.get_center
    App.GG.Effect.frame.inc // Increases projectile frame by 1
    App.GG.Effect.vbox.in_tile(App.GG.img.target_tile) // Adds image bound to tile
    effect
    App.GG.Effect.projectile.hit.dissapear(center)
    get projectile = App.GG.Effect.projectile.get
    without frame: App.GG.Effect.pass
    without projectile: App.GG.Effect.pass
    let x = App.GG.Effect.basic_attack.bullet_position_x((frame  - 1 )% projectile_period, projectile_period, reverse)
    App.GG.Effect {
      App.GG.Effect.vbox.at_tile_with_variation(center, x, -5, img)
      if ((frame % projectile_period) =? 0) && (frame >? 0) then // Each time it reaches projectile_period
        App.GG.Effect {
          let new_pos = App.GG.Coord.front(projectile@info@team, center) // Gets coord in front of projectile's
          App.GG.Effect.projectile.move(new_pos) // Moves projectile a tile forward
          return unit
        }
      else
        App.GG.Effect.pass
    }
  }


App.GG.Effect.basic_attack.get_enhancement(pos: App.GG.Coord): App.GG.Effect<Maybe<Unit>>
  App.GG.Effect { 
    get creature = App.GG.Effect.creature.get
    get center = App.GG.Effect.coord.get_center
    get tweak = App.GG.Effect.status.get_at("enhance_attack", pos)
    without creature: App.GG.Effect { return none } 
    without tweak: App.GG.Effect { return none } 
    without tweak: App.GG.Effect { return none } 
    App.GG.Effect {
      get effect = App.GG.Creature.Status.enhance_attack.get_effect(tweak, center)
      return some(effect)
    }
  }

