App.GG.Effect.movement(
  destination: App.GG.Coord
  move_frame: U64
  final_frame: U64
): App.GG.Effect<Unit>

  App.GG.Effect {
    App.GG.Effect.animation.modify_by_duration.in_tile(24, final_frame)
    get frame =  App.GG.Effect.frame.get
    get center = App.GG.Effect.coord.get_center
    get grid = App.GG.Effect.grid.get
    get creature = App.GG.Effect.creature.get
    App.GG.Effect.frame.inc 
    without creature: App.GG.Effect.pass
    without frame: App.GG.Effect.pass
    if App.GG.Coord.eql(center, destination) then App.GG.Effect.actions.reset else 
    if App.GG.Coord.can_walk(center, destination, grid, true) then
      switch U64.eql(frame) {
        0: 
          App.GG.Effect {
            App.GG.Effect.animation.update(App.GG.Animation.movement)
            App.GG.Effect.tile.add_status(App.GG.Tile.Status.reserved(final_frame, creature@id), destination)
          }
        move_frame: 
          App.GG.Effect.movement.move_at(center, destination, true)
        final_frame: 
          App.GG.Effect.actions.reset
      } default App.GG.Effect.pass
    else
      App.GG.Effect.actions.reset
  }

App.GG.Effect.movement.arrow(
  arrow: App.GG.Arrow
  move_frame: U64
  final_frame: U64
): App.GG.Effect<Unit>
  App.GG.Effect {
    get center = App.GG.Effect.coord.get_center
    let destination = App.GG.Arrow.direction(center, arrow)
    App.GG.Effect.movement(destination, move_frame, final_frame)
  }

App.GG.Effect.movement.move_at(from: App.GG.Coord, destination: App.GG.Coord, restriction: Bool): App.GG.Effect<Unit>
  App.GG.Effect {
    get grid = App.GG.Effect.grid.get
    let new_grid = App.GG.Grid.move_creature(from, destination, grid, restriction)
    App.GG.Effect.grid.set(new_grid)
  }  

App.GG.Effect.movement.player_movement(arrow: App.GG.Arrow): App.GG.Effect<Unit>
  App.GG.Effect.movement.arrow(arrow, 12, 24)

    
