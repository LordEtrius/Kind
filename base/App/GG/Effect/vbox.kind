App.GG.Effect.vbox.set(vbox: Bool -> VoxBox -> VoxBox): App.GG.Effect<Unit>  (center, origin, local)
  
  App.GG.Effect.Result.new!(unit, center, origin, local, vbox, 0, "")

App.GG.Effect.vbox.in_tile(vbox: VoxBox): App.GG.Effect<Unit>
  (center, origin, local)
  let {x, y}  = App.GG.Coord.to_xy(center)
  let img     = App.GG.draw.image(x, y, 0, vbox)
  App.GG.Effect.Result.new!(unit, center, origin, local, img, 0, "")

App.GG.Effect.vbox.at_tile(coord: App.GG.Coord, vbox: VoxBox): App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let tile = App.GG.Grid.get(coord, grid)
  let img =
    without tile: (enemy, img) img
    let {x, y}  = App.GG.Coord.to_xy(coord)
    App.GG.draw.image(x, y, 5, vbox)
  App.GG.Effect.Result.new!(unit, center, origin, local, img, 0, "")

App.GG.Effect.vbox.at_tile_with_variation(coord: App.GG.Coord, x_var: I32, y_var: I32, vbox: VoxBox): App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let tile = App.GG.Grid.get(coord, grid)
  let img =
    without tile: (enemy, img) img
    let {x, y}  = App.GG.Coord.to_xy(coord)
    //log(App.GG.Coord.show(Pair.new!!(x,y)))
    let new_x = I32.to_u32(U32.to_i32(x) + x_var)
    let new_y = I32.to_u32(U32.to_i32(y) + y_var)
    App.GG.draw.image(new_x, new_y, 5, vbox)
  App.GG.Effect.Result.new!(unit, center, origin, local, img, 0, "")

App.GG.Effect.vbox.arc(from: App.GG.Coord, to: App.GG.Coord, v: F64, t: F64, vbox: VoxBox): App.GG.Effect<Unit>
  (center, origin, local)
  let slerp = App.GG.Coord.slerp(from, to, t)
  let img = 
    let slerp_xy = App.GG.Coord.slerp_to_xy(from, slerp, v)
    let canvas = App.GG.Coord.to_xy(from)
    let x_var = canvas@fst + slerp_xy@fst
    let y_var = canvas@snd + slerp_xy@snd
    App.GG.draw.image(x_var, y_var, 5, vbox)
  App.GG.Effect.Result.new!(unit, center, origin, local, img, 0, "")


App.GG.Effect.vbox.quadratic_bezier(from: App.GG.Coord, to: App.GG.Coord, pivot: Pair<F64, F64>, v: F64,t: F64, vbox: VoxBox): App.GG.Effect<Unit>
  (center, origin, local)
  let slerp = App.GG.Coord.quadratic_bezier(from, to, pivot, t)
  let img = 
    let slerp_xy = App.GG.Coord.slerp_to_xy(from, slerp, v)
    let canvas = App.GG.Coord.to_xy(from)
    let x_var = canvas@fst + slerp_xy@fst
    let y_var = canvas@snd + slerp_xy@snd
    App.GG.draw.image(x_var, y_var, 5, vbox)
  App.GG.Effect.Result.new!(unit, center, origin, local, img, 0, "")


App.GG.Effect.vbox.modify_by_duration.in_tile(animation: List<VoxBox>, current_frame: U64,  max_frames: U64): App.GG.Effect<Unit>
  App.GG.Effect.vbox.modify_by_duration(animation, current_frame, max_frames, App.GG.Effect.vbox.in_tile)



App.GG.Effect.vbox.modify_by_duration(animation: List<VoxBox>, current_frame: U64,  max_frames: U64, f: VoxBox -> App.GG.Effect<Unit>): App.GG.Effect<Unit>
  let count = Nat.to_f64(List.length!(animation))
  let max   = U64.to_f64(max_frames)
  let part  = max / count
  let mod   = I32.to_nat(F64.to_i32((U64.to_f64(current_frame) / part)))
  let img   = List.get<VoxBox>(mod, animation)
  without img: App.GG.Effect.pass
  f(img)


