App.GG.Chip.Upper.energy_reinforcement: App.GG.Chip
  App.GG.Chip.new(
    "xtaegy"
    App.GG.Class.energy
    App.GG.Chip.Upper.energy_reinforcement.Effect(5, 4, 2, 1, 4)
    10                              //  Energy, Duration, delay, interval, globe_num
    App.GG.img.bazooka
    App.GG.Attributes.new(3,0,1,0) // TODO : Alter
  )


App.GG.Chip.Upper.energy_reinforcement.Effect(energy_val: I32, duration: F64, delay: F64, interval: F64, globe_num: Nat): App.GG.Effect<Unit>
  App.GG.Effect {
    App.GG.Effect.charge.reset
    get frame = App.GG.Effect.frame.get
    get grid = App.GG.Effect.grid.get
    get creature = App.GG.Effect.creature.get
    get team = App.GG.Effect.team.get
    get center = App.GG.Effect.coord.get_center
    without creature: App.GG.Effect.pass
    without team: App.GG.Effect.pass
    without frame: App.GG.Effect.pass
    App.GG.Effect { 
      App.GG.Effect.vbox.in_tile(App.GG.Chip.Arms.bazooka.img(frame))
      let animation = App.GG.Animation.attack
      let func = 
        (coord: App.GG.Coord)
          App.GG.Effect { 
            get seed = App.GG.Effect.random.get
            let coords = App.GG.Coord.randoms_size_by_team(grid, seed, globe_num, team)
            let projectile_effect = App.GG.Chip.Upper.energy_reinforcement.Projectile.Effect(energy_val, duration, delay, interval)
            let projectile_info = App.GG.Projectile.Info.new(creature@team, App.GG.Projectile.Status.unit, NatSet.new, 0#64, true)
            let projectile = App.GG.Projectile.new(projectile_info, projectile_effect)

            App.GG.Effect.projectile.different_status(coords, projectile)
          }
      App.GG.Effect.generic_action(func(center), animation, 12, 24)
    }
  }


App.GG.Chip.Upper.energy_reinforcement.globe_position(current_frame: U64, max_frame: U64): I32
  let tile_y = +32#32
  let start = 0.0 - 64
  let end = 32.0
  let pos = F64.lerp(start, end, U64.to_f64(current_frame) / U64.to_f64(max_frame))
  F64.to_i32(pos) - tile_y
  



App.GG.Chip.Upper.energy_reinforcement.Projectile.Effect(energy_val: I32, duration: F64, delay: F64, interval: F64): App.GG.Effect<Unit>
  App.GG.Effect {
    App.GG.Effect.frame.inc // Increases projectile frame by 1
    get grid = App.GG.Effect.grid.get
    get center = App.GG.Effect.coord.get_center
    get frame = App.GG.Effect.frame.get
    get team = App.GG.Effect.team.get
    get status = App.GG.Effect.projectile.get_status
    get projectile = App.GG.Effect.projectile.get
    without projectile: App.GG.Effect.pass
    let status_num = Nat.to_u64(App.GG.Projectile.get_cast(projectile))
    let uduration = I32.to_u64(F64.to_i32(duration*60))
    let udelay = I32.to_u64(F64.to_i32(delay* 60))
    let uinterval = I32.to_u64(F64.to_i32(interval* 60 )) * status_num
    without frame: App.GG.Effect.pass
    without status: App.GG.Effect.pass
    without team: App.GG.Effect.pass
      App.GG.Effect {
    //fase 1 = standby
        let falling = 
          if (frame <? (udelay + uinterval)) && (frame >? uinterval) then
            let y = App.GG.Chip.Upper.energy_reinforcement.globe_position(frame - uinterval, udelay) 
            App.GG.Effect { 
              App.GG.Effect.vbox.at_tile(center, App.GG.img.yellow_tile)
              App.GG.Effect.vbox.at_tile_with_variation(center, 0, y, App.GG.img.missile_down)

            }
          else
            App.GG.Effect.pass

      //fase 2 = caindo
        let on_ground = 
          if frame >? (udelay + uinterval) then
            App.GG.Effect { 
              App.GG.Effect.vbox.at_tile(center, App.GG.img.target_tile)
              App.GG.Effect.projectile.hit.energy_regen_at(energy_val, center)
              App.GG.Effect.projectile.hit.dissapear(center)
            }
          else
            App.GG.Effect.pass

      //fase 3 = no ch√£o
        let time_over = 
          if frame =? (uduration + udelay + uinterval) then // At frame 16
            App.GG.Effect.projectile.delete
          else
            App.GG.Effect.pass

        falling
        on_ground
        time_over
      }
  }
