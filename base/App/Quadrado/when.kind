// Event handler
App.Quadrado.when: App.When<App.Quadrado.State>
  (event, state)
  let local = state@local
  case event {
    key_down:
      let new_local = 
        switch List.any<U16>(U16.eql(event.code)) {
          //Jump 
          ['W']: App.Quadrado.when.jump(local, Bool.true)

          //Left movement
          ['A']: 
            let right = local@creature@movement@direction@snd
            App.Quadrado.when.movement(local, Bool.true, right)
          //Right movement
          ['D']: 
            let left = local@creature@movement@direction@fst
            App.Quadrado.when.movement(local, left, Bool.true)

          //Starts Falling
          ['S']: App.Quadrado.when.down(local, Bool.true)

          //Dash
          [16#16]: App.Quadrado.when.dash(local)
        } default local

      App.set_local<App.Quadrado.State>(new_local)
      
    key_up:
      let new_local = 
        switch List.any<U16>(U16.eql(event.code)) {
          //Stops Jumps
          ['W']: App.Quadrado.when.jump(local, Bool.false)

          //Not Moving Left
          ['A']: 
            let right = local@creature@movement@direction@snd
            App.Quadrado.when.movement(local, Bool.false, right)

          //Not Moving Right
          ['D']: 
            let left = local@creature@movement@direction@fst
            App.Quadrado.when.movement(local, left, Bool.false)

          //Stops Falling
          ['S']: App.Quadrado.when.down(local, Bool.false)

          //Stop dash
          [16#16]: App.Quadrado.when.stop_dash(local)
      } default local

      App.set_local<App.Quadrado.State>(new_local)
    frame: 
      //Deals with Physics
      let local = App.Quadrado.frame.update_position(local)

      //Deals with movement
      let local = App.Quadrado.frame.movement(local)

      //Deals with Status
      let local = App.Quadrado.frame.update_status(local)

      App.set_local<App.Quadrado.State>(local)

  } default App.pass<App.Quadrado.State>




App.Quadrado.when.movement(local: App.Quadrado.State.Local, left: Bool, right: Bool): App.Quadrado.State.Local
  let creature = local@creature
  let movement = creature@movement
  let direction = movement@direction

  //Moves while true
  let dir = 
    (pair: Pair<Bool, Bool>)
    Pair.new<Bool, Bool>(left, right)

  let set_dir = movement@direction <- dir(direction)
  let new_creature = creature@movement <- set_dir
  local@creature <- new_creature


 //Function to deal with dash on when key_press
App.Quadrado.when.dash(local: App.Quadrado.State.Local): App.Quadrado.State.Local
  let creature = local@creature
  let physics  = creature@physics
  let dash     = physics@dashing
  let dash_cd  = creature@status@cooldown@dash
  case dash { 
    none:
      if F64.gtn(dash_cd, 0) then
        local
      else
        let new_dash     = App.Quadrado.Physics.Dash.start
        let new_physics  = App.Quadrado.Physics.new(physics@on_air, some(new_dash))
        let new_creature = creature@physics <- new_physics
        local@creature <- new_creature
    some:
      local
  }



 //Function to deal with dash on when key_release
App.Quadrado.when.stop_dash(local: App.Quadrado.State.Local): App.Quadrado.State.Local
  let creature = local@creature
  let physics = creature@physics
  let dash = physics@dashing
  case dash { 
    none:
      local
    some:
      let new_dash     = physics@dashing <- none
      let new_creature = creature@physics <- new_dash
      local@creature <- new_creature
  }


//Function to deal with the jump on when
App.Quadrado.when.jump(local: App.Quadrado.State.Local, w_pressed: Bool): App.Quadrado.State.Local
  let creature = local@creature
  let status = creature@status
  let jumps = status@jumps@fst
  let physics = creature@physics
  let on_air = physics@on_air
  let dash = physics@dashing
  if Maybe.is_none!(dash) then
    if w_pressed then 
      let creature = App.Quadrado.Physics.start_jump(local@creature)
      without on_air: local@creature <- creature
        case jumps { 
          zero: local
          succ:
            let new_status  = status@jumps@fst <- jumps.pred
            let creature    = creature@status  <- new_status
            let local       = local@creature   <- creature
            local
          }
    else
      without on_air:  local
        local@creature <~ App.Quadrado.Physics.remove_rising
  else
    local


App.Quadrado.when.down(local: App.Quadrado.State.Local, s_pressed: Bool): App.Quadrado.State.Local
  let creature = local@creature
  let physics = creature@physics
  let on_air = physics@on_air
  let dash = physics@dashing
  if s_pressed then 
    let new_air = some(App.Quadrado.Physics.Air.new(0.0, none))
    local@creature@physics@on_air <~ (x: Maybe<App.Quadrado.Physics.Air>) Maybe.or!(x, new_air)
  else
    let on_air        = physics@on_air
    without on_air:  local
      local@creature <~ App.Quadrado.Physics.remove_rising
